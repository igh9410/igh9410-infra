# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/
.vscode/

# Go workspace file
go.work
go.work.sum

# env file
.env
.env.*
# Node dependencies
**/node_modules/
.pnp.cjs
.pnp.data.json
.pnp.loader.mjs
.pnp.*

# Build artifacts
dist/
build/
*.log
*.gz

# Remix specific
.remix/

# Yarn specific
.yarn/cache/
.yarn/unplugged/
.yarn/build-state.yml
.yarn/install-state.gz
.yarn/plugins/

# Environment files
.env
.env.*.local

# IDE specific
.idea/

*.suo
*.ntvs*
*.njsproj
*.sln

# OS specific
.DS_Store
Thumbs.db

node_modules/

# Terraform files
*.tfstate
*.tfstate.*
*.tfvars
*.tfvars.json
*.tfplan
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# GCP service account
gramnuri-dev-service-account.json

# K8s secrets
secrets.yaml

db_credentials.txt

# Packer user data
**/http/user-data.yml

# Ignore backend.conf
backend.conf
gitleaks-report.json
.vault_pass

# Ansible
ansible/files/id_rsa_ansible
